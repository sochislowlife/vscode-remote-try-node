/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

'use strict';

const express = require('express');
const fs = require('fs');
const ping = require('net-ping');
const http = require('http');


// Constants
const PORT = 3000;
const HOST = '0.0.0.0';

// App
const app = express();
app.get('/', (req, res) => {
	res.send('Hello remote world!\n');
});

app.listen(PORT, HOST);
console.log(`Running on http://${HOST}:${PORT}`);

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —á–∏—Ç–∞–Ω–Ω—è —Ñ–∞–π–ª—É –∑—ñ —Å–ø–∏—Å–∫–æ–º IP-–∞–¥—Ä–µ—Å
function readPrintersFile() {
    try {
        const printers = JSON.parse(fs.readFileSync('printers.json'));
        return printers;
    } catch (error) {
        console.error("–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è —Ñ–∞–π–ª—É –∑—ñ —Å–ø–∏—Å–∫–æ–º –ø—Ä–∏–Ω—Ç–µ—Ä—ñ–≤:", error);
        return [];
    }
}

// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–µ—Å—ñ—ó –¥–ª—è –ø—ñ–Ω–≥—É–≤–∞–Ω–Ω—è
const session = ping.createSession();

// –°–ø–∏—Å–æ–∫ IP-–∞–¥—Ä–µ—Å –¥–ª—è –ø—ñ–Ω–≥—É–≤–∞–Ω–Ω—è
const ipAddresses = readPrintersFile();

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø—ñ–Ω–≥—É–≤–∞–Ω–Ω—è IP-–∞–¥—Ä–µ—Å–∏
function pingHost(ip) {
    return new Promise((resolve, reject) => {
        session.pingHost(ip, function (error) {
            if (error) {
                console.log(ip + ": " + error.toString());
                resolve({ ip, status: false }); // –í—ñ–¥–º—ñ—á–∞—î–º–æ, —â–æ –ø—ñ–Ω–≥—É–≤–∞–Ω–Ω—è –Ω–µ –≤–¥–∞–ª–æ—Å—è
            } else {
                console.log(ip + ": Alive");
                resolve({ ip, status: true }); // –í—ñ–¥–º—ñ—á–∞—î–º–æ, —â–æ –ø—ñ–Ω–≥—É–≤–∞–Ω–Ω—è –±—É–ª–æ —É—Å–ø—ñ—à–Ω–∏–º
            }
        });
    });
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø—ñ–Ω–≥—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö IP-–∞–¥—Ä–µ—Å
async function pingAllHosts(ipAddresses) {
    const results = await Promise.all(ipAddresses.map(ip => pingHost(ip)));
    return results;
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –≤ —Ç–∞–±–ª–∏—Ü—ñ HTML
function updateTable(res, results) {
    res.writeHead(200, { 'Content-Type': 'text/html; charset=UTF-8' }); // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∫–æ–¥—É–≤–∞–Ω–Ω—è UTF-8
    res.write('<html><head><title>–ü—Ä–∏–Ω—Ç–µ—Ä–∏</title><meta charset="UTF-8"></head><body>');
    res.write('<h1>–°—Ç–∞—Ç—É—Å –ø—Ä–∏–Ω—Ç–µ—Ä—ñ–≤</h1>');
    res.write('<table border="1"><tr><th>IP-–∞–¥—Ä–µ—Å–∞</th><th>–°—Ç–∞—Ç—É—Å</th></tr>');

    // –î–æ–¥–∞—î–º–æ —Ä—è–¥–∫–∏ —Ç–∞–±–ª–∏—Ü—ñ –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø—ñ–Ω–≥—É–≤–∞–Ω–Ω—è
    results.forEach(({ ip, status }) => {
        console.log(`IP: ${ip}, –°—Ç–∞—Ç—É—Å: ${status ? "Online" : "Offline"}`);
        const lampClass = status ? "lamp-online" : "lamp-offline";
        const lampIcon = status ? "üü¢" : "üî¥";
        const tableRow = `<tr><td><a href="http://${ip}">${ip}</a></td><td><span class="lamp ${lampClass}">${lampIcon}</span>${status ? "Online" : "Offline"}</td></tr>`;
        res.write(tableRow);
    });

    res.write('</table></body></html>');
    res.end(); // –ó–∞–≤–µ—Ä—à—É—î–º–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
}

// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
const server = http.createServer(async function (req, res) {
    try {
        const results = await pingAllHosts(ipAddresses); // –ü—ñ–Ω–≥—É—î–º–æ –≤—Å—ñ –∞–¥—Ä–µ—Å–∏
        updateTable(res, results); // –û–Ω–æ–≤–ª—é—î–º–æ —Ç–∞–±–ª–∏—Ü—é –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø—ñ–Ω–≥—É–≤–∞–Ω–Ω—è
    } catch (error) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –ø—ñ–Ω–≥—É–≤–∞–Ω–Ω—è:", error);
        res.writeHead(500, { 'Content-Type': 'text/plain' });
        res.end('500 Internal Server Error');
    }
});

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ –∑ —Å–µ—Ä–≤–µ—Ä–∞ —É —Ñ–∞–π–ª ping.html
function copyTableToHTML() {
    try {
        const serverHTML = fs.readFileSync('server.js', 'utf8'); // –ó—á–∏—Ç—É—î–º–æ HTML –∑ —Å–µ—Ä–≤–µ—Ä–∞
        fs.writeFileSync('ping.html', serverHTML); // –ó–∞–ø–∏—Å—É—î–º–æ HTML —É —Ñ–∞–π–ª ping.html
        console.log("–¢–∞–±–ª–∏—Ü—é —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ –≤ —Ñ–∞–π–ª ping.html");
    } catch (error) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ:", error);
    }
}
// –ü—Ä–æ—Å–ª—É—Ö–æ–≤—É–≤–∞–Ω–Ω—è –ø–æ—Ä—Ç—É 3000
server.listen(3000, 'ping.html', function () {
    console.log('–í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ death.pp.ua/ping:3000/');
});

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ –∑ —Å–µ—Ä–≤–µ—Ä–∞ —É —Ñ–∞–π–ª ping.html
function copyTableToHTML() {
    try {
        const serverHTML = fs.readFileSync('server.js', 'utf8'); // –ó—á–∏—Ç—É—î–º–æ HTML –∑ —Å–µ—Ä–≤–µ—Ä–∞
        fs.writeFileSync('ping.html', serverHTML); // –ó–∞–ø–∏—Å—É—î–º–æ HTML —É —Ñ–∞–π–ª ping.html
        console.log("–¢–∞–±–ª–∏—Ü—é —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ –≤ —Ñ–∞–π–ª ping.html");
    } catch (error) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ:", error);
    }
}

// –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ
copyTableToHTML();